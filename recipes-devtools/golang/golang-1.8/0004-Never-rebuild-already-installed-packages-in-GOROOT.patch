diff --git a/src/cmd/go/pkg.go b/src/cmd/go/pkg.go
index e40f942..4850bfc 100644
--- a/src/cmd/go/pkg.go
+++ b/src/cmd/go/pkg.go
@@ -17,7 +17,6 @@ import (
 	"os"
 	pathpkg "path"
 	"path/filepath"
-	"runtime"
 	"sort"
 	"strconv"
 	"strings"
@@ -1178,7 +1177,7 @@ func computeStale(pkgs ...*Package) {
 // "go1.X[.Y]" for Go releases, and "devel +hash" at tip.
 // Determine whether we are in a released copy by
 // inspecting the version.
-var isGoRelease = strings.HasPrefix(runtime.Version(), "go1")
+//var isGoRelease = strings.HasPrefix(runtime.Version(), "go1")
 
 // isStale and computeBuildID
 //
@@ -1487,6 +1486,12 @@ func isStale(p *Package) (bool, string) {
 		return true, "cannot stat install target"
 	}
 
+	// XXX - for OE builds, make anything in GOROOT non-stale, to prevent
+	//       a package build from overwriting the build root. - XXX
+	if p.Standard || p.Root == goroot {
+		return false, "OE specific: GOROOT and standard packages do not get rebuilt"
+	}
+
 	// Package is stale if the expected build ID differs from the
 	// recorded build ID. This catches changes like a source file
 	// being removed from a package directory. See issue 3895.
@@ -1507,28 +1512,6 @@ func isStale(p *Package) (bool, string) {
 		}
 	}
 
-	// The checks above are content-based staleness.
-	// We assume they are always accurate.
-	//
-	// The checks below are mtime-based staleness.
-	// We hope they are accurate, but we know that they fail in the case of
-	// prebuilt Go installations that don't preserve the build mtimes
-	// (for example, if the pkg/ mtimes are before the src/ mtimes).
-	// See the large comment above isStale for details.
-
-	// If we are running a release copy of Go and didn't find a content-based
-	// reason to rebuild the standard packages, do not rebuild them.
-	// They may not be writable anyway, but they are certainly not changing.
-	// This makes 'go build' skip the standard packages when
-	// using an official release, even when the mtimes have been changed.
-	// See issue 3036, issue 3149, issue 4106, issue 8290.
-	// (If a change to a release tree must be made by hand, the way to force the
-	// install is to run make.bash, which will remove the old package archives
-	// before rebuilding.)
-	if p.Standard && isGoRelease {
-		return false, "standard package in Go release distribution"
-	}
-
 	// Time-based staleness.
 
 	built := fi.ModTime()
