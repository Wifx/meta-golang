diff --git a/src/cmd/go/build.go b/src/cmd/go/build.go
index 2fc9a94..ed5e149 100644
--- a/src/cmd/go/build.go
+++ b/src/cmd/go/build.go
@@ -1483,7 +1483,7 @@ func (b *builder) build(a *action) (err error) {
 		}
 
 		cgoExe := tool("cgo")
-		if a.cgo != nil && a.cgo.target != "" {
+		if a.cgo != nil && a.cgo.target != "" && os.Getenv("GOTOOLDIR") == "" {
 			cgoExe = a.cgo.target
 		}
 		outGo, outObj, err := b.cgo(a, cgoExe, obj, pcCFLAGS, pcLDFLAGS, cgofiles, objdirCgofiles, gccfiles, cxxfiles, a.p.MFiles, a.p.FFiles)
diff --git a/src/go/build/build.go b/src/go/build/build.go
index da12d50..e3b9605 100644
--- a/src/go/build/build.go
+++ b/src/go/build/build.go
@@ -1546,7 +1546,7 @@ func init() {
 }
 
 // ToolDir is the directory containing build tools.
-var ToolDir = filepath.Join(runtime.GOROOT(), "pkg/tool/"+runtime.GOOS+"_"+runtime.GOARCH)
+var ToolDir = envOr("GOTOOLDIR", filepath.Join(runtime.GOROOT(), "pkg/tool/"+runtime.GOOS+"_"+runtime.GOARCH))
 
 // IsLocalImport reports whether the import path is
 // a local import path, like ".", "..", "./foo", or "../foo".
diff --git a/src/make.bash b/src/make.bash
index cd0d665..d8b7482 100755
--- a/src/make.bash
+++ b/src/make.bash
@@ -172,10 +172,11 @@ if [ "$do_host_build" = "yes" ]; then
 	mv cmd/dist/dist "$GOTOOLDIR"/dist
 	echo
 
+    GOTOOLDIR_BOOTSTRAP="${GOTOOLDIR_BOOTSTRAP:-$GOTOOLDIR}"
 	echo "##### Building packages and commands for host, $GOHOSTOS/$GOHOSTARCH."
 	# CC_FOR_TARGET is recorded as the default compiler for the go tool. When building for the host, however,
 	# use the host compiler, CC, from `cmd/dist/dist env` instead.
-	CC=$CC GOOS=$GOHOSTOS GOARCH=$GOHOSTARCH \
+	CC=$CC GOOS=$GOHOSTOS GOARCH=$GOHOSTARCH GOTOOLDIR="$GOTOOLDIR_BOOTSTRAP" \
 		"$GOTOOLDIR"/go_bootstrap install -gcflags "$GO_GCFLAGS" -ldflags "$GO_LDFLAGS" -v std cmd
 	echo
 fi
